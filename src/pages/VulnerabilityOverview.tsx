import React, { useMemo } from "react";
import {
  PieChart, Pie, Cell, Tooltip as RTooltip, ResponsiveContainer, Legend,
  BarChart, Bar, XAxis, YAxis, CartesianGrid,
  ScatterChart, Scatter, ZAxis,
} from "recharts";

type OptRes = {
  allVulnerabilities: number;
  uniqueVulnerabilities: number;
  topPriority: number;
};

type PriorityMap = Record<string, number>;
type PrioritisationItem = {
  name: string;        // "Priority 3"
  severity: "low" | "medium" | "high" | "critical" | string;
  cvss: number;        // 0..10
  epss: number;        // 0..1
  prirorityInt: number; // typo from API kept as-is
};
type PriRes = {
  vulnerabilities: number;
  priority: PriorityMap;
  vulnerabilityPrioritisationData: PrioritisationItem[];
};

const SEVERITY_COLORS: Record<string, string> = {
  low: "#60a5fa",
  medium: "#f59e0b",
  high: "#ef4444",
  critical: "#7f1d1d",
  unknown: "#64748b",
};

const PRIORITY_COLORS: Record<string, string> = {
  "Priority 1": "#ef4444",
  "Priority 1+": "#b91c1c",
  "Priority 2": "#f59e0b",
  "Priority 3": "#60a5fa",
  "Priority 4": "#10b981",
  "Unprioritized": "#64748b",
};

function toPriorityArray(priority?: PriorityMap | null) {
    return Object.entries(priority ?? {}).map(([name, count]) => ({
      name,
      count,
    }));
  }
  

function percent(n: number) {
  return `${(n * 100).toFixed(2)}%`;
}

export default function VulnerabilityOverview({
  optimization,
  prioritisation,
  vulnerabilityCounts,
  height = 380,
}: {
  optimization: OptRes;
  prioritisation: PriRes;
  vulnerabilityCounts?: Record<string, number>;
  height?: number;
}) {
  const priorityArr = useMemo(
    () => toPriorityArray(prioritisation?.priority),
    [prioritisation?.priority]
  );

  // Pie wants value key
  const pieData = useMemo(
    () => priorityArr.map(p => ({ name: p.name, value: p.count })),
    [priorityArr]
  );

  // Horizontal bar data (same)
  const barData = priorityArr;

  // Scatter data: map CVSS vs EPSS%, color by severity, bubble size by priorityInt
  // Group by severity so we can render separate series with Legend
  const scatterSeries = useMemo(() => {
    // 1) Safe source array
    const src =
      Array.isArray(prioritisation?.vulnerabilityPrioritisationData)
        ? prioritisation!.vulnerabilityPrioritisationData
        : [];
  
    // 2) Group by severity (lowercased), with sane fallbacks
    const groups: Record<string, PrioritisationItem[]> = {};
    for (const raw of src) {
      if (!raw) continue;
      const item: PrioritisationItem = {
        name: raw.name ?? "N/A",
        severity: (raw.severity ?? "unknown").toLowerCase(),
        cvss: Number(raw.cvss ?? 0),
        epss: Number(raw.epss ?? 0),
        prirorityInt: Number(raw.prirorityInt ?? 1),
      };
      (groups[item.severity] ??= []).push(item);
    }
  
    // 3) Build chart series
    return Object.entries(groups).map(([severity, items]) => ({
      severity,
      color: SEVERITY_COLORS[severity] ?? SEVERITY_COLORS.unknown,
      points: items.map(i => ({
        cvss: i.cvss,
        epssPct: i.epss * 100,
        size: Math.max(60, i.prirorityInt * 60),
        name: i.name,
      })),
    }));
  // Important: depend on the array itself (or just prioritisation)
  }, [prioritisation?.vulnerabilityPrioritisationData]);

  const total = optimization?.allVulnerabilities || prioritisation?.vulnerabilities || 0;

  const severityData = useMemo(() => {
  const list = Array.isArray(prioritisation?.vulnerabilityPrioritisationData)
    ? prioritisation.vulnerabilityPrioritisationData
    : [];

  const counts: Record<string, number> = {};
  for (const item of list) {
    const sev = item?.severity?.toLowerCase() || "unknown";
    counts[sev] = (counts[sev] ?? 0) + 1;
  }

  return Object.entries(counts).map(([name, value]) => ({
    name,
    value,
    color: SEVERITY_COLORS[name] ?? SEVERITY_COLORS.unknown,
  }));
}, [prioritisation?.vulnerabilityPrioritisationData]);

const severityTotal = useMemo(
  () => severityData.reduce((acc, d) => acc + d.value, 0),
  [severityData]
);

// label: "High – 45.3%"
const severityLabel = (props: any) => {
  const { name, value } = props.payload ?? {};
  const pct = severityTotal ? ((value / severityTotal) * 100).toFixed(1) : "0.0";
  return `${name} – ${pct}%`;
};

  return (
    <div className="grid gap-6">
      {/* KPI tiles */}
      <div className="grid grid-cols-1 sm:grid-cols-4 gap-4">
        <KPICard label="All Vulnerabilities" value={optimization?.allVulnerabilities} />
        <KPICard label="Unique Vulnerabilities" value={optimization?.uniqueVulnerabilities} />
        <KPICard label="Critical Vulnerabities" value={vulnerabilityCounts?.critical} />
        <KPICard label="High Vulnerabities" value={vulnerabilityCounts?.high} />
      </div>

      {/* NEW: Severity Pie */}
      <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-3">Vulnerabilities by Severity</h3>
        <div className="h-[300px]">
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={severityData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius="80%"
                label={severityLabel}
              >
                {severityData.map((entry, idx) => (
                  <Cell key={`sev-${idx}`} fill={entry.color} />
                ))}
              </Pie>
              <Legend />
              <RTooltip formatter={(val: any, name: any) => [val, name]} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Priority distribution: donut + bar */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-3">Priority Distribution</h3>
          <div className="h-[300px]">
            <ResponsiveContainer>
              <PieChart>
                <Pie
                  data={pieData}
                  dataKey="value"
                  nameKey="name"
                  innerRadius="55%"
                  outerRadius="80%"
                  paddingAngle={2}
                >
                  {pieData.map((entry, idx) => (
                    <Cell key={`cell-${idx}`} fill={PRIORITY_COLORS[entry.name] ?? "#94a3b8"} />
                  ))}
                </Pie>
                <Legend />
                <RTooltip
                  formatter={(val: any, name: any) => [`${val} (${total ? percent(val / total) : "0%"})`, name]}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div> */}

        {/* <div className="rounded-2xl border p-4">
          <h3 className="font-semibold mb-3">Priority Distribution (Counts)</h3>
          <div className="h-[300px]">
            <ResponsiveContainer>
              <BarChart data={barData} layout="vertical" margin={{ left: 24 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis type="number" allowDecimals={false} />
                <YAxis type="category" dataKey="name" width={110} />
                <Bar dataKey="count">
                  {barData.map((entry, idx) => (
                    <Cell key={`b-${idx}`} fill={PRIORITY_COLORS[entry.name] ?? "#94a3b8"} />
                  ))}
                </Bar>
                <Legend />
                <RTooltip />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div> */}
      </div>

      {/* Risk scatter: CVSS vs EPSS */}
      {/* <div className="rounded-2xl border p-4">
        <h3 className="font-semibold mb-1">Risk Scatter: CVSS vs EPSS</h3>
        <p className="text-sm text-muted-foreground mb-3">
          Each dot is a vulnerability. X = CVSS (0–10). Y = EPSS (%) — higher means more likely to be exploited.
        </p>
        <div className="h-[360px]">
          <ResponsiveContainer>
            <ScatterChart margin={{ top: 10, right: 20, bottom: 10, left: 10 }}>
              <CartesianGrid />
              <XAxis type="number" dataKey="cvss" name="CVSS" domain={[0, 10]} />
              <YAxis type="number" dataKey="epssPct" name="EPSS (%)" domain={[0, 100]} />
              <ZAxis type="number" dataKey="size" range={[60, 200]} />
              <Legend />
              <RTooltip
                formatter={(value: any, name: string, props: any) => {
                  if (name === "epssPct") return [`${value.toFixed(2)}%`, "EPSS"];
                  if (name === "cvss") return [value, "CVSS"];
                  return [value, name];
                }}
                labelFormatter={() => ""}
              />
              {scatterSeries.map(series => (
                <Scatter
                  key={series.severity}
                  name={series.severity}
                  data={series.points}
                  fill={series.color}
                />
              ))}
            </ScatterChart>
          </ResponsiveContainer>
        </div>
      </div> */}
    </div>
  );
}

function KPICard({ label, value }: { label: string; value: number }) {
  return (
    <div className="rounded-2xl border p-4">
      <div className="text-sm text-muted-foreground">{label}</div>
      <div className="text-3xl font-semibold">{value ?? 0}</div>
    </div>
  );
}
